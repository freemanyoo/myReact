250807

#MyComponent.JSX

코드 스니펫: 플러그인에서 reactjs code snippets
함수형 컴포넌트 : rsc
클래스형 컴포넌트 : rcc

export default MyComponent;   내보내기, 다른 곳에서 이용 가능. 없으면 사용 못함 

props: App.jsx 부모 컴포넌트에서 자식 컴포넌트 MyComponent props
1. 함수형
app.jsx -->     <MyComponent name="이상용" /> 
MyComponent.jsx -->     const MyComponent = ({ name = "기본값 이름입니다.", children }) => {
                            <h3>props 객체이 있는 이름을 사용해보기 : {name}</h3>
2. 클래스형
app.jsx -->     <MyComponent name="이상용" /> 
MyComponent.jsx -->     <h3>props 객체이 있는 이름을 사용해보기 : {this.props.name}</h3>

디폴트 props 설정
1. 함수형
app.jsx -->     <MyComponent/>
MyComponent.jsx -->     const MyComponent = ({ name = "기본값 이름입니다.", children }) => {
                            <h3>props 객체이 있는 이름을 사용해보기 : {name}</h3>
2. 클래스형 
app.jsx -->     <MyComponent/>
MyComponent.jsx -->     <h3>props 객체이 있는 이름을 사용해보기 : {this.props.name}</h3>
                            MyComponent.defaultProps = {
                                name: "클래스형 컴포넌트 버전. 기본값 이름입니다.",
                            };

children 전달 
1. 함수형 
app.jsx -->     <MyComponent>children</MyComponent>
MyComponent.jsx -->     const MyComponent = ({children }) => {
<h3>children 받기 : {children}</h3>
2. 클래스형
app.jsx -->     <MyComponent>children</MyComponent>
MyComponent.jsx -->     <h3>children 받기 : {this.props.children}</h3>

#Counter.jsx

super 부모호출 

setState 비동기적

(콜백함수1, 콜백함수2)비동기성을 안전하게 다루기 위해 업데이터 함수와 콜백 함수를 활용한함
this.setState(
              (prevState) => {
                return {
                  number: prevState.number + 1,
                };
              }, // 콜백함수1
              () => {
                console.log(
                  "setState 가 동작 후, 추가 동작하는 함수 정의 해보기. "
                );
              } // 콜백함수2
            );
            // 한번 더 작성하기.
            this.setState((prevState) => ({
              number: prevState.number + 1,
            }));
          }}

#Say.jsx

useState는 함수형 컴포넌트가 동적인 데이터를 가질 수 있도록 해주는 핵심적인 Hook이며, [현재상태, 상태업데이트함수] = useState(초깃값) 형태로 사용되어 컴포넌트의     
  상태를 효율적으로 관리할 수 있게 해줍니다.
